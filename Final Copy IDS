{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c7c5fe43",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2022-04-17T23:35:23.375388Z",
     "iopub.status.busy": "2022-04-17T23:35:23.375047Z",
     "iopub.status.idle": "2022-04-17T23:35:23.379654Z",
     "shell.execute_reply": "2022-04-17T23:35:23.379156Z"
    },
    "papermill": {
     "duration": 0.013906,
     "end_time": "2022-04-17T23:35:23.381348",
     "exception": false,
     "start_time": "2022-04-17T23:35:23.367442",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#The purpose of this code was to create a code that produces to \"random\" numbers, the first between 850-950 and the other between 650-750.\n",
    "#The first represents malicious packets correctly stopped by using IDS, the second is malicious packets stopped while not using IDS.\n",
    "#The other numbers 1000 minus either the first or second number represent the number of malicious packets that got through either with IDS or without.\n",
    "#These numbers are then shown\n",
    "#Then a cluster bar graph is created and labeled and presented to show these numbers. The purpose of this was to graphically who how much more IDS\n",
    "#stops malicious packets than not using IDS."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "29f98025",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-17T23:35:23.392982Z",
     "iopub.status.busy": "2022-04-17T23:35:23.392564Z",
     "iopub.status.idle": "2022-04-17T23:35:23.400191Z",
     "shell.execute_reply": "2022-04-17T23:35:23.399696Z"
    },
    "papermill": {
     "duration": 0.015123,
     "end_time": "2022-04-17T23:35:23.401805",
     "exception": false,
     "start_time": "2022-04-17T23:35:23.386682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "90ed29c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-17T23:35:23.413964Z",
     "iopub.status.busy": "2022-04-17T23:35:23.413221Z",
     "iopub.status.idle": "2022-04-17T23:35:23.420148Z",
     "shell.execute_reply": "2022-04-17T23:35:23.419389Z"
    },
    "papermill": {
     "duration": 0.015194,
     "end_time": "2022-04-17T23:35:23.422160",
     "exception": false,
     "start_time": "2022-04-17T23:35:23.406966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "857\n",
      "143\n",
      "672\n",
      "328\n"
     ]
    }
   ],
   "source": [
    "#get values\n",
    "a = random.randrange(850, 950)\n",
    "b = 1000 - a\n",
    "c = random.randrange(650, 750,1)\n",
    "d = 1000 - c\n",
    "print(a)\n",
    "print(b)\n",
    "print(c)\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c43f04fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-17T23:35:23.434399Z",
     "iopub.status.busy": "2022-04-17T23:35:23.433947Z",
     "iopub.status.idle": "2022-04-17T23:35:23.686504Z",
     "shell.execute_reply": "2022-04-17T23:35:23.684757Z"
    },
    "papermill": {
     "duration": 0.262394,
     "end_time": "2022-04-17T23:35:23.690212",
     "exception": false,
     "start_time": "2022-04-17T23:35:23.427818",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#begin working on clustered bar graph\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "#labels\n",
    "labels = ['Detected as Malicious', 'Detected as Normal']\n",
    "yes_ids = [a, b]\n",
    "no_ids = [c, d]\n",
    "\n",
    "x_axis = np.arange(len(labels))  # the label locations\n",
    "bar_width = 0.35  # the width of the bars\n",
    "\n",
    "#creating bars (this was more challenging than I thought)\n",
    "fig, ax = plt.subplots()\n",
    "bar_with_ids = ax.bar(x_axis - bar_width/2, yes_ids, bar_width, label='With IDS') #the IDS bar\n",
    "bar_without_ids = ax.bar(x_axis + bar_width/2, no_ids, bar_width, label='Without IDS') #the non-IDS bar\n",
    "\n",
    "#labeling the clustered bar graph\n",
    "ax.set_title('Malicious Packets Detection')\n",
    "ax.set_xticks(x_axis + bar_width / 2)\n",
    "ax.set_xticklabels(labels)\n",
    "ax.legend()\n",
    "\n",
    "\n",
    "fig.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.180706,
   "end_time": "2022-04-17T23:35:24.321822",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-04-17T23:35:14.141116",
   "version": "2.3.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
